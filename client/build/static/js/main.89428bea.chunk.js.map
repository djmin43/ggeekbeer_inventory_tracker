{"version":3,"sources":["components/Navbar.tsx","contextAPI/DataContext.tsx","components/inventory/InventoryDesc.tsx","components/inventory/InventoryTable.tsx","components/inventory/InventoryEvents.tsx","components/inventory/InventoryEdit.tsx","components/inventory/InventorySearch.tsx","components/inventory/Inventory.tsx","components/event/EventDesc.tsx","components/event/EventTable.tsx","components/event/EventSearch.tsx","components/event/Event.tsx","components/AddInventory.tsx","components/auth/Login.tsx","components/auth/Signup.tsx","components/auth/Auth.tsx","components/user/User.tsx","components/UseInventory.tsx","App.tsx","reportWebVitals.ts","index.tsx"],"names":["Navbar","className","to","TodayContext","React","createContext","InventoryContext","GetInventoryContext","EventContext","GetEventContext","DataProvider","children","today","moment","format","useState","id","inventory_name","inventory_type","inventory_amount","expiration_date","import_date","inventory_desc","events","event_type","event_desc","event_date","inventoryInfo","setInventoryInfo","event_amount","inventory_id","user_id","inventory","user","user_name","eventInfo","setEventInfo","getInventoryInfo","useCallback","a","axios","get","res","data","forEach","item","formatDate","console","log","getEventInfo","Provider","value","date","d","Date","month","getMonth","day","getDate","year","getFullYear","length","join","InventoryDesc","inventorySelect","InventoryTable","setInventorySelect","setDescComp","setInventory","handleClick","e","inventoryId","target","getAttribute","select","filter","onClick","valueOf","sortedInventory","slice","sort","b","map","data-value","InventoryEvents","index","InventoryEdit","history","useHistory","useContext","newEditInventory","setNewEditInventory","eventDesc","setEventDesc","editInventory","preventDefault","name","handleSubmit","patch","post","event","prev","new","push","useEffect","onSubmit","type","onChange","InventorySearch","searchType","setSearchType","targetMonth","setTargetMonth","targetType","setTargetType","targetInventory","includes","Inventory","getInventory","descComp","editComp","setEditComp","editInv","EventDesc","eventSelect","setEventSelect","EventTable","setEvents","sortByDate","sortedEvents","EventSearch","targetEventType","setTargetEventType","targetUserName","setTargetUserName","targetInventoryType","setTargetInventoryType","targetEvents","Event","Form","setMessage","setValidation","newInventory","setNewInventory","handleChange","Message","message","AddInventory","validation","Login","userId","password","login","setLogin","window","location","reload","response","msg","Signup","password2","userName","code","signUp","setSignup","validator","signUpNew","signUpPost","Auth","User","logOut","useInventory","setUseInventory","UseInventory","App","setUserName","verifyUser","getVerify","exact","path","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.89428bea.chunk.js","sourcesContent":["\nimport '../styling/Nav.css'\nimport {\n    Link\n  } from \"react-router-dom\";\n\n\nconst Navbar = () => {\n\n\n    return (\n        <div className=\"navbar\">\n             <ul>\n                <li>\n                    <Link to=\"/\">재고</Link>\n                </li>\n                <li>\n                    <Link to=\"/add\">재고추가</Link>\n                </li>\n                <li>\n                    <Link to=\"/use\">재고사용</Link>\n                </li>\n                <li>\n                    <Link to=\"/event\">이벤트 로그</Link>\n                </li>\n                <li>\n                    <Link to=\"/user\">사용자</Link>\n                </li>\n            </ul>\n\n        </div>\n    )\n}\n\nexport default Navbar\n","import React, {  useState, useCallback } from 'react'\nimport moment from 'moment'\nimport axios from 'axios'\n\n// TYPES\ninterface Inventory {\n    id: number;\n    inventory_name: string;\n    inventory_type: string;\n    inventory_amount: number;\n    expiration_date: string;\n    import_date: string;\n    inventory_desc: string;\n    events: any[]\n}\n\ninterface Event {\n    id: number;\n    event_type: string;\n    event_amount: number;\n    event_date: string;\n    event_desc: string;\n    inventory_id: any;\n    user_id: any;\n    inventory: {};\n    user: {}\n}\n\n// Create Context\nexport const TodayContext = React.createContext<string>('')\nexport const InventoryContext = React.createContext<any>('')\nexport const GetInventoryContext = React.createContext<any>('')\nexport const EventContext = React.createContext<any>('')\nexport const GetEventContext = React.createContext<any>('')\n\n\nexport const DataProvider = ({children}:any) => {\n\n    const today: string = moment().format('YYYY-MM-DD');\n\n    // Initial State\n    const [inventoryInfo, setInventoryInfo] = useState<Inventory[]>([{\n        id: 0,\n        inventory_name: '',\n        inventory_type: '',\n        inventory_amount: 0,\n        expiration_date: today,\n        import_date: today,\n        inventory_desc: '',\n        events: [{\n            event_type: '',\n            event_desc: '',\n            event_date: ''\n        }]\n    }])\n\n    const [eventInfo, setEventInfo] = useState<Event[]>([{\n        id: 0,\n        event_type: '',\n        event_amount: 0,\n        event_date: today,\n        event_desc: '',\n        inventory_id: '',\n        user_id: '',\n        inventory: {\n            inventory_name: '',\n            inventory_type: ''\n        },\n        user: {\n            user_name: ''\n        }\n    }])\n\n    // Get Requests\n\n    const getInventoryInfo = useCallback (async () => {\n        try {\n            const res = await axios.get('/inventory/')\n            const inventoryInfo = await res.data\n            await inventoryInfo.forEach((item:Inventory) => {\n                item.expiration_date = formatDate(item.expiration_date)\n                item.import_date = formatDate(item.import_date)\n                item.events.forEach((item:any) => {\n                    item.event_date = formatDate(item.event_date)\n                })\n                }\n            )\n            await setInventoryInfo(inventoryInfo)\n        } catch(error) {\n            console.log(error)\n        }\n    }, [])\n\n    const getEventInfo = useCallback (async () => {\n        try {\n            const res = await axios.get('/event/info')\n            const eventInfo = await res.data\n            await eventInfo.forEach((item: Event) => {\n                item.event_date = formatDate(item.event_date)\n            })\n            await setEventInfo(eventInfo)\n        } catch(error) {\n            console.log(error)\n        }\n    }, [])\n\n\n    return (\n        <TodayContext.Provider value={today}>\n            <InventoryContext.Provider value={inventoryInfo}>\n            <GetInventoryContext.Provider value={getInventoryInfo}>\n                        <EventContext.Provider value={eventInfo}>\n                        <GetEventContext.Provider value={getEventInfo}>\n                                    {children}\n                        </GetEventContext.Provider>\n                        </EventContext.Provider>\n            </GetInventoryContext.Provider>\n            </InventoryContext.Provider>\n        </TodayContext.Provider>\n\n    )\n}\n\n\n// EVENT DATE FORMAT FUNCTION\nfunction formatDate(date: string) {\n    var d = new Date(date),\n        month = '' + (d.getMonth() + 1),\n        day = '' + d.getDate(),\n        year = d.getFullYear();\n\n    if (month.length < 2) \n        month = '0' + month;\n    if (day.length < 2) \n        day = '0' + day;\n\n    return [year, month, day].join('-');\n}","\n\nconst InventoryDesc = ({inventorySelect}: any) => {\n\n\n\n    return (\n        <div >\n            <div className=\"table\">\n                <div className=\"descHeader header\">\n                    <div className=\"headerCell\">\n                        <h4>{inventorySelect.inventory_name}</h4>\n                    </div>\n                </div>\n                <div className=\"descRow\">\n                    <div className=\"descCell\">\n                        <p><b>재고타입:</b> {inventorySelect.inventory_type}</p>\n                        <p><b>재고양:</b> {inventorySelect.inventory_amount}</p>\n                        <p><b>유통기한:</b> {inventorySelect.expiration_date}</p>\n                        <p><b>입고날짜:</b> {inventorySelect.import_date}</p>\n                        <h3>재고설명</h3>\n                        <span>{inventorySelect.inventory_desc}</span>\n                    </div>\n                </div>\n            </div>\n\n        </div>\n    )\n}\n\nexport default InventoryDesc\n","interface Inventory {\n    id: number;\n    inventory_name: string;\n    inventory_type: string;\n    inventory_amount: number;\n    expiration_date: string;\n    import_date: string;\n    inventory_desc: string;\n    events: any[]\n}\n\nconst InventoryTable = ({inventory, setInventorySelect, setDescComp, setInventory}: any) => {\n\n    const handleClick = (e: any) => {\n        const inventoryId = e.target.getAttribute('data-value')\n        const select: any = inventory.filter((item:Inventory )=> item.id === +inventoryId)\n        setInventorySelect(select[`0`])\n        setDescComp(true)\n    }\n\n    // SORT BY DATE (TOGGLE)\n    const sortByDate = () => {\n        if (new Date(inventory[0].expiration_date).valueOf() < new Date(inventory[inventory.length -1 ].expiration_date).valueOf()) {\n            const sortedInventory = inventory.slice(0).sort((a: Inventory, b:Inventory) => {return new Date(b.expiration_date).valueOf() - new Date(a.expiration_date).valueOf()})\n            setInventory(sortedInventory)\n        } else {\n            const sortedInventory = inventory.slice(0).sort((a: Inventory, b:Inventory) => {return new Date(a.expiration_date).valueOf() - new Date(b.expiration_date).valueOf()})\n            setInventory(sortedInventory)\n        }\n    }\n\n    return (\n        <div className=\"table\">\n            \n        <div className=\"inventoryHeader header\">\n            <div className=\"headerCell\">\n                <p>이름</p>\n            </div>\n            <div className=\"headerCell\">\n                <p>타입</p>\n            </div>\n            <div className=\"headerCell\">\n                <p>재고양</p>\n            </div>\n            <div className=\"headerCell dateHeader\" onClick={sortByDate}>\n                <p>유통기한</p>\n            </div>\n        </div>\n        {inventory.map((item: Inventory) => \n        <div key={item.id} className=\"inventoryRow row\">\n                <div className=\"cell\">\n                    <p data-value={item.id} onClick={handleClick}>{item.inventory_name}</p>\n                </div>\n                <div className=\"cell\">\n                    <p>{item.inventory_type}</p>\n                </div>\n                <div className=\"cell\">\n                    <p>{item.inventory_amount}</p>\n                </div>\n                <div className=\"cell\" >\n                    <p>{item.expiration_date}</p>\n                </div>\n\n            </div>\n        )}\n\n    </div>\n    )\n}\n\nexport default InventoryTable\n","import '../../styling/Table.css'\n\nconst InventoryEvents = ({inventorySelect}:any) => {\n\n    return (\n                <div className=\"table\">\n                    <div className=\"inventoryEventsHeader header\">\n                        <div className=\"headerCell\">\n                            <p>이벤트타입</p>\n                        </div>\n                        <div className=\"headerCell\">\n                            <p>재고양</p>\n                        </div>\n                        <div className=\"headerCell\">\n                            <p>날짜</p>\n                        </div>\n                    </div>\n                    \n                {inventorySelect.events.map((item:any, index:number) => \n                    <div className=\"inventoryEventsRow row\" key={index}>\n                        <div className=\"cell\">\n                            <p>{item.event_type}</p>\n                        </div>\n                        <div className=\"cell\">\n                            <p>{item.event_amount}</p>\n                        </div>\n                        <div className=\"cell\">\n                            <p>{item.event_date}</p>\n                        </div>\n                    </div>\n                    )}\n                </div>\n                \n\n    )\n}\n\nexport default InventoryEvents\n","import React, {useState, useEffect, useContext} from 'react'\nimport axios from 'axios'\nimport '../../styling/InventoryEdit.css'\nimport { useHistory } from 'react-router-dom'\nimport { TodayContext } from '../../contextAPI/DataContext'\n\n\ninterface Inventory {\n    id: number;\n    inventory_name: string;\n    inventory_type: string;\n    inventory_amount: number;\n    expiration_date: string;\n    import_date: string;\n    inventory_desc: string;\n    events: any[]\n}\n\nconst InventoryEdit = ({inventorySelect}: any) => {\n\n    let history = useHistory()\n    const today = useContext(TodayContext)\n\n    const [newEditInventory, setNewEditInventory] = useState<Inventory>(inventorySelect)\n    const [eventDesc, setEventDesc] = useState<string>('')\n    \n    const editInventory = (e: any) => {\n        e.preventDefault()\n        setNewEditInventory({...newEditInventory,\n            [e.target.name]: e.target.value})\n    }\n\n    // API Call\n    const handleSubmit = async (e: React.SyntheticEvent) => {\n        e.preventDefault()\n        try {\n        await axios.patch('/inventory/edit', newEditInventory)\n        await axios.post('/event/inventory-edit', {\n            event: {event_desc: eventDesc, today: today}, \n            prev: inventorySelect, \n            new: newEditInventory\n        })\n        await history.push('/')\n        } catch(error) {\n            console.log(error)\n        }\n    }\n\n    useEffect(() => {\n        setNewEditInventory(inventorySelect)\n    }, [inventorySelect])\n\n    return (\n        <div>\n            <div className=\"editContainer\">\n                <div className=\"table\">\n                <div className=\"descHeader header\">\n                    <div className=\"headerCell\">\n                        <h4>재고내용변경</h4>\n                    </div>\n                </div>\n\n                <form onSubmit={handleSubmit}>\n                    <label>재고이름:\n                        <input name=\"inventory_name\" type=\"text\" onChange={editInventory} value={newEditInventory.inventory_name}></input>\n                    </label>\n                    <label>재고타입:\n                        <input name=\"inventory_type\" type=\"text\" onChange={editInventory} value={newEditInventory.inventory_type}></input>\n                    </label>\n                    <label>재고양\n                        <input name=\"inventory_amount\" type=\"number\" onChange={editInventory} value={newEditInventory.inventory_amount}></input>\n                    </label>\n                    <label>유통기한\n                        <input name=\"expiration_date\" type=\"date\" onChange={editInventory} value={newEditInventory.expiration_date}></input>\n                    </label>\n                    <label>입고날짜\n                        <input name=\"import_date\" type=\"date\" onChange={editInventory} value={newEditInventory.import_date}></input>\n                    </label>\n                    <label>재고설명\n                        <input name=\"inventory_desc\" type=\"text\" onChange={editInventory} value={newEditInventory.inventory_desc}></input>\n                    </label>\n                    <label>내용변경이유\n                        <input name=\"event_desc\" type=\"text\" onChange={(e) => setEventDesc(e.target.value)} value={eventDesc}></input>\n                    </label>\n                    <button>내용변경확정</button>\n                </form>\n            </div>\n        </div>\n\n\n        </div>\n    )\n}\n\nexport default InventoryEdit\n","import React, { useState, useContext } from 'react'\nimport moment from 'moment'\nimport { InventoryContext } from '../../contextAPI/DataContext';\n\n\ninterface Inventory {\n    id: number;\n    inventory_name: string;\n    inventory_type: string;\n    inventory_amount: number;\n    expiration_date: string;\n    import_date: string;\n    inventory_desc: string;\n    events: any[]\n}\n\nconst InventorySearch = ({setInventory}:any) => {\n    const month: string = moment().format('YYYY-MM');\n    const inventoryInfo = useContext(InventoryContext)\n\n    const [searchType, setSearchType] = useState<string>('default')\n    \n    const [targetMonth, setTargetMonth] = useState<string>(month)\n    const [targetType, setTargetType] = useState<string>('default')\n\n    // Change handlers\n    const handleSearch = (e:any) => {\n        e.preventDefault()\n        setSearchType(e.target.value)\n    }\n    const handleMonth = (e:React.ChangeEvent<HTMLInputElement>) => {\n        e.preventDefault()\n        setTargetMonth(e.target.value)\n    }\n    const handleType = (e:any) => {\n        e.preventDefault()\n        setTargetType(e.target.value)\n    }\n\n    // Search handler. If 'default(none)' is selected, return all.\n    const handleSubmit = (e:React.SyntheticEvent) => {\n        e.preventDefault()\n        if (searchType === \"expire\") {\n            const targetInventory = inventoryInfo.filter((item:Inventory) => item.expiration_date.includes(targetMonth))\n            setInventory(targetInventory)\n        } else if (searchType === \"type\") {\n            if (targetType === \"default\") {\n                setInventory(inventoryInfo)\n            } else {\n                const targetInventory = inventoryInfo.filter((item:Inventory) => item.inventory_type.includes(targetType))\n                setInventory(targetInventory)\n            }\n            console.log('type')\n        } else if (searchType === \"default\") {\n            setInventory(inventoryInfo)\n        }\n    }\n\n    return (\n        <div>\n            <form onSubmit={handleSubmit} >\n                <select onChange={handleSearch}>\n                    <option value=\"default\">검색항목을 선택하세요</option>\n                    <option value=\"expire\">유통기한</option>\n                    <option value=\"type\">타입</option>\n                </select>\n\n                {searchType === 'default' ? '' \n                : searchType === 'expire' ? \n                    <label>expiration date by month\n                        <input type=\"month\" value={targetMonth} onChange={handleMonth}></input>\n                    </label>\n                : searchType === 'type' ? \n                    <label>inventory type\n                        <select onChange={handleType}>\n                            <option value=\"default\">타입을 선택해주세요</option>\n                            <option value=\"홉\">홉</option>\n                            <option value=\"몰트\">몰트</option>\n                            <option value=\"이스트\">이스트</option>\n                            <option value=\"부재료\">부재료</option>\n                        </select>\n                    </label> \n                : ''}\n\n                <button>Search</button>\n            </form>\n        </div>\n    )\n}\n\nexport default InventorySearch\n","import React, { useContext, useEffect, useState } from 'react'\nimport { GetInventoryContext, InventoryContext, TodayContext } from '../../contextAPI/DataContext'\nimport '../../styling/Table.css'\nimport InventoryDesc from './InventoryDesc'\nimport InventoryTable from './InventoryTable'\nimport InventoryEvents from './InventoryEvents'\nimport InventoryEdit from './InventoryEdit'\nimport Inventorysearch from './InventorySearch'\n\n\ninterface Inventory {\n    id: number;\n    inventory_name: string;\n    inventory_type: string;\n    inventory_amount: number;\n    expiration_date: string;\n    import_date: string;\n    inventory_desc: string;\n    events: any[]\n}\n\n\nconst Inventory = () => {\n    // UseContexts\n    const getInventory = useContext(GetInventoryContext)\n    const inventoryInfo = useContext(InventoryContext)\n    const today = useContext(TodayContext)\n\n    // Initial States\n    const [descComp, setDescComp] = useState<boolean>(false)\n    const [editComp, setEditComp] = useState<boolean>(false)\n    const [inventory, setInventory] = useState<Inventory[]>([{\n        id: 0,\n        inventory_name: '',\n        inventory_type: '',\n        inventory_amount: 0,\n        expiration_date: today,\n        import_date: today,\n        inventory_desc: '',\n        events: [{\n            event_type: '',\n            event_desc: '',\n            event_date: ''\n        }]\n    }])\n\n    const [inventorySelect, setInventorySelect] = useState<Inventory>({\n        id: 0,\n        inventory_name: '',\n        inventory_type: '',\n        inventory_amount: 0,\n        expiration_date: today,\n        import_date: today,\n        inventory_desc: '',\n        events: [{\n            event_type: '',\n            event_desc: '',\n            event_date: ''\n        }]\n    })\n\n    const closeDesc = (e: any) => {\n        e.preventDefault()\n        setDescComp(false)\n    }\n\n    const editInv = (e: any) => {\n        e.preventDefault()\n        setEditComp(!editComp)\n    }\n\n    useEffect(() => {\n        getInventory()\n    }, [getInventory])\n\n    useEffect(() => {\n        setInventory(inventoryInfo)\n    }, [inventoryInfo])\n\n    return (\n        <div>\n            <div className=\"tableContainer\">\n                <h2>재고상황</h2>\n                    {/* This controls rendering for description and edit components */}\n                    {descComp ?\n                        <>\n                            {editComp ? <>\n                                            <InventoryEdit inventorySelect={inventorySelect}/>\n                                            <button className=\"editButton\" onClick={editInv}>개별재고</button>\n                                        </>\n                            : \n                                <>\n                                    <InventoryDesc inventorySelect={inventorySelect} setInventorySelect={setInventorySelect} setDescComp={setDescComp}/>\n                                    <InventoryEvents inventorySelect={inventorySelect} />\n                                    <button className=\"editButton\" onClick={editInv}>내용변경</button>\n                                </>\n                            }\n                        <button className=\"closeButton\" onClick={closeDesc}>재고테이블</button>\n                        </> \n                    :\n                    <>\n                        <InventoryTable inventory={inventory} setInventory={setInventory} setInventorySelect={setInventorySelect} setDescComp={setDescComp} />\n                        <Inventorysearch setInventory={setInventory} />\n                    </>\n                    }\n\n            </div>\n        </div>\n    )\n}\n\nexport default Inventory;\n","\nconst EventDesc = ({eventSelect, setEventSelect} : any) => {\n\n    const handleClick = (e: React.MouseEvent<HTMLElement>) => {\n        e.preventDefault()\n        setEventSelect({...eventSelect, id: 0})\n    }\n\n    return (\n        <div >\n            <h2>이벤트 개별정보</h2>\n            <div className=\"table\">\n                <div className=\"descHeader header\">\n                    <div className=\"headerCell\">\n                        <h4>{eventSelect.inventory.inventory_name}</h4>\n                    </div>\n                </div>\n                <div className=\"descRow\">\n                    <div className=\"descCell\">\n                        <p><b>재고이름:</b> {eventSelect.inventory.inventory_name}</p>\n                        <p><b>이벤트날짜:</b> {eventSelect.event_date}</p>\n                        <p><b>변경양:</b> {eventSelect.event_amount}</p>\n                        <h3>이벤트설명</h3>\n                        <span>{eventSelect.event_desc}</span>\n                    </div>\n                    <button className=\"closeButton\" onClick={handleClick}>닫기</button>\n                </div>\n            </div>\n        </div>\n    )\n}\n\nexport default EventDesc\n","\nconst EventTable = ({events, setEventSelect, setEvents} : any) => {\n\n    // Filter out the selected item.\n    const handleClick = (e: any) => {\n        const event = e.target.getAttribute('data-value')\n        const select = events.filter((item:any )=> item.id === +event)\n        setEventSelect(select['0'])\n    }\n\n    // SORT BY DATE (TOGGLE)\n    const sortByDate = async () => {\n        if (new Date(events[0].event_date).valueOf() < new Date(events[events.length -1 ].event_date).valueOf()) {\n            const sortedEvents = await events.slice(0).sort((a: any, b:any) => {return new Date(b.event_date).valueOf() - new Date(a.event_date).valueOf()})\n            await setEvents(sortedEvents)\n        } else {\n            const sortedEvents = await events.slice(0).sort((a: any, b:any) => {return new Date(a.event_date).valueOf() - new Date(b.event_date).valueOf()})\n            await setEvents(sortedEvents)\n        }\n    }\n\n    return (\n        <div className=\"table\">\n            <div className=\"eventHeader header\">\n                <div className=\"headerCell dateHeader\" onClick={sortByDate}>\n                    <p>날짜</p>\n                </div>\n                <div className=\"headerCell\">\n                    <p>이벤트타입</p>\n                </div>\n                <div className=\"headerCell\">\n                    <p>변경양</p>\n                </div>\n                <div className=\"headerCell\">\n                    <p>재고이름</p>\n                </div>\n                <div className=\"headerCell\">\n                    <p>재고타입</p>\n                </div>\n                <div className=\"headerCell\">\n                    <p>사용자</p>\n                </div>\n            </div>\n            {events.map((item: any) => \n            <div key={item.id} className=\"eventRow row\">\n                    <div className=\"cell date\">\n                        <p>{item.event_date}</p>\n                    </div>\n                    <div className=\"cell\">\n                        <p>{item.event_type}</p>\n                    </div>\n                    <div className=\"cell\">\n                        <p>{item.event_amount}</p>\n                    </div>\n                    <div className=\"cell\" >\n                        <p data-value={item.id} onClick={handleClick}>{item.inventory.inventory_name}</p>\n                    </div>\n                    <div className=\"cell\">\n                        <p>{item.inventory.inventory_type}</p>\n                    </div>\n                    <div className=\"cell\">\n                        <p>{item.user.user_name}</p>\n                    </div>\n                </div>\n            )}\n        </div>\n    )\n}\n\nexport default EventTable\n","import React, { useState, useContext } from 'react'\nimport moment from 'moment'\nimport { InventoryContext, EventContext } from '../../contextAPI/DataContext';\n\n\ninterface Event {\n    id: number;\n    event_type: string;\n    event_amount: number;\n    event_date: string;\n    event_desc: string;\n    inventory_id: any;\n    user_id: any;\n    inventory: {};\n    user: {};\n}\n\nconst EventSearch = ({setEvents} : any) => {\n\n    const month: string = moment().format('YYYY-MM');\n\n    const inventoryInfo = useContext(InventoryContext)\n    const eventInfo = useContext(EventContext)\n\n    const [searchType, setSearchType] = useState<string>('default')\n    \n    const [targetMonth, setTargetMonth] = useState<string>(month)\n    const [targetEventType, setTargetEventType] = useState<string>('')\n    const [targetUserName, setTargetUserName] = useState<string>('')\n    const [targetInventoryType, setTargetInventoryType] = useState<string>('default')\n\n\n    // Change handlers\n    const handleSearch = (e:any) => {\n        e.preventDefault()\n        setSearchType(e.target.value)\n    }\n    const handleMonth = (e:React.ChangeEvent<HTMLInputElement>) => {\n        e.preventDefault()\n        setTargetMonth(e.target.value)\n    }\n    const handleEventType = (e:React.ChangeEvent<HTMLInputElement>) => {\n        e.preventDefault()\n        setTargetEventType(e.target.value)\n    }\n    const handleUserName = (e:React.ChangeEvent<HTMLInputElement>) => {\n        e.preventDefault()\n        setTargetUserName(e.target.value)\n    }\n    const handleInventoryType = (e:any) => {\n        e.preventDefault()\n        setTargetInventoryType(e.target.value)\n    }\n\n\n    // Search handler. If 'default(none)' is selected, return all.\n    const handleSubmit = (e:React.SyntheticEvent) => {\n        e.preventDefault()\n        if (searchType === \"default\") {\n            setEvents(eventInfo)\n        }\n        if (searchType === \"eventDate\") {\n            const targetEvents = eventInfo.filter((item:Event) => item.event_date.includes(targetMonth))\n            setEvents(targetEvents)\n        }\n        if (searchType === \"eventType\") {\n            if (targetEventType === \"default\") {\n                setEvents(eventInfo)\n            } else {\n                const targetEvents = eventInfo.filter((item:Event) => item.event_type.includes(targetEventType))\n                setEvents(targetEvents)\n            }\n        } \n        if (searchType === \"inventoryType\") {\n            const targetEvents = eventInfo.filter((item:any) => item.inventory.inventory_type.includes(targetInventoryType))\n            setEvents(targetEvents)\n        } \n        if (searchType === \"userName\") {\n            const targetEvents = eventInfo.filter((item:any) => item.user.user_name.includes(targetUserName))\n            setEvents(targetEvents)\n        } \n\n    }\n    return (\n        <div>\n        <form onSubmit={handleSubmit} >\n            <select onChange={handleSearch}>\n                <option value=\"default\">검색항목을 선택하세요</option>\n                <option value=\"eventDate\">날짜</option>\n                <option value=\"eventType\">이벤트타입</option>\n                <option value=\"inventoryType\">재고타입</option>\n                <option value=\"userName\">유저이름</option>\n            </select>\n\n            {searchType === 'default' ? '' \n            : searchType === 'eventDate' ? \n                <label>날짜\n                    <input type=\"month\" value={targetMonth} onChange={handleMonth}></input>\n                </label>\n            : searchType === 'eventType' ? \n                <label>이벤트타입\n                    <input type=\"text\" value={targetEventType} onChange={handleEventType}></input>\n                </label>\n            : searchType === 'inventoryType' ? \n            <label>재고타입\n                        <select onChange={handleInventoryType}>\n                            <option value=\"default\">타입을 선택해주세요</option>\n                            <option value=\"홉\">홉</option>\n                            <option value=\"몰트\">몰트</option>\n                            <option value=\"이스트\">이스트</option>\n                            <option value=\"부재료\">부재료</option>\n                        </select>            </label>    \n            : searchType === 'userName' ? \n            <label>사용자이름\n                <input type=\"text\" value={targetUserName} onChange={handleUserName}></input>\n            </label>\n            : ''}\n            <button>Search</button>\n        </form>\n    </div>\n    )\n}\n\nexport default EventSearch\n","import '../../styling/Table.css'\nimport React, { useContext, useEffect, useState } from 'react'\nimport { EventContext, GetEventContext, TodayContext } from '../../contextAPI/DataContext'\nimport EventDesc from './EventDesc'\nimport EventTable from './EventTable'\nimport EventSearch from './EventSearch'\n\ninterface Event {\n    id: number;\n    event_type: string;\n    event_amount: number;\n    event_date: string;\n    event_desc: string;\n    inventory_id: any;\n    user_id: any;\n    inventory: {};\n    user: {}\n}\n\nconst Event = () => {\n    const eventInfo = useContext(EventContext)\n    const getEventInfo = useContext(GetEventContext)\n    const today = useContext(TodayContext)\n\n    const [events, setEvents] = useState<Event[]>([{\n        id: 0,\n        event_type: '',\n        event_amount: 0,\n        event_date: today,\n        event_desc: '',\n        inventory_id: '',\n        user_id: '',\n        inventory: {\n            inventory_name: '',\n            inventory_type: ''\n        },\n        user: {\n            user_name: ''\n        }\n    }])\n\n    const [eventSelect, setEventSelect] = useState<Event>({\n        id: 0,\n        event_type: '',\n        event_amount: 0,\n        event_date: today,\n        event_desc: '',\n        inventory_id: '',\n        user_id: '',\n        inventory: {\n            inventory_name: '',\n            inventory_type: ''\n        },\n        user: {\n            user_name: ''\n        }})\n\n    useEffect(() => {\n        getEventInfo()\n    }, [getEventInfo])\n\n    useEffect(() => {\n        setEvents(eventInfo)\n    }, [eventInfo])\n\n\n    // This is where I need join table for the event.\n    return (\n        <div>\n            <div className=\"tableContainer\">\n                {/* Render only if item is selected */}\n                {eventSelect.id === 0 ? '' : <EventDesc eventSelect={eventSelect} setEventSelect={setEventSelect}/>}\n                <h2>이벤트 로그</h2>\n                <EventTable events={events} setEventSelect={setEventSelect} setEvents={setEvents}/>\n                <EventSearch setEvents={setEvents} />\n            </div>\n    </div>\n    )\n}\n\nexport default Event\n","import React, {useState, useContext } from 'react'\nimport axios from 'axios'\nimport { TodayContext } from '../contextAPI/DataContext'\nimport '../styling/Form.css';\n\ninterface FormProps {\n    setMessage: (message: string) => void;\n    setValidation: (validation: boolean) => void;\n}\n\ninterface MessageProps {\n    message: string;\n}\n\nconst AddInventory = () => {\n\n    const [message, setMessage] = useState<string>('')\n    const [validation, setValidation] = useState<boolean>(false)\n\n    return (\n        <div>\n            <div className=\"formContainer\">\n                <h2>재고추가</h2>\n                    {validation === false ? \n                        <>\n                            <Form setMessage={setMessage} setValidation={setValidation}/>\n                            <Message message={message}/>\n                        </> \n                    : \n                        <Message message={message}/>\n                    }\n\n            </div>\n        </div>\n    )\n}\n\n\nconst Form = ({setMessage, setValidation}: FormProps) => {\n\n    const today = useContext(TodayContext)\n    const [newInventory, setNewInventory] = useState({\n        inventory_name: '',\n        inventory_type: 'none',\n        inventory_amount: 0,\n        expiration_date: today,\n        import_date: today,\n        inventory_desc: '',\n        event_desc: '',\n        event_type: '재료추가',\n        today\n    })\n    // Submit Control\n    const handleChange = (e: any) => {\n        e.preventDefault()\n        setNewInventory({...newInventory, \n        [e.target.name]: e.target.value\n        })\n    }\n    const handleSubmit = async (e: React.SyntheticEvent) => {\n        e.preventDefault()\n        try {\n            if (newInventory.inventory_name === '' || newInventory.inventory_type === 'none' || newInventory.inventory_desc === '' || newInventory.event_desc === '')  {\n                setMessage('이름 / 타입 / 재료설명 / 비고 를 모두 적어주세요!')\n            } else if (newInventory.expiration_date == newInventory.import_date) {\n                setMessage('입고날짜와 유통기한이 같습니다. 확인해주세요')\n            } \n                else {\n                await axios.post('/inventory/new', newInventory)\n                setMessage(`${newInventory.inventory_name}을 등록하였습니다.`)\n                setValidation(true)\n\n            }\n        } catch(error) {\n            console.log(error)\n        }\n    }\n\n    return (\n        <form onSubmit={handleSubmit}>\n        <label>이름:\n            <input type=\"text\" name=\"inventory_name\" value={newInventory.inventory_name} onChange={handleChange}></input>\n        </label>\n        타입:\n        <select name=\"inventory_type\" onChange={handleChange}>타입:\n            <option value=\"none\">재료타입을 선택해주세요</option>\n            <option>홉</option>\n            <option>몰트</option>\n            <option>이스트</option>\n            <option>부재료</option>\n        </select>\n        <label>양:\n            <input type=\"number\" name=\"inventory_amount\" value={newInventory.inventory_amount} onChange={handleChange}></input>\n        </label>\n        <label>유통기한:\n            <input type=\"date\" name=\"expiration_date\" value={newInventory.expiration_date} onChange={handleChange}></input>\n        </label>\n        <label>입고날짜:\n            <input type=\"date\" name=\"import_date\" value={newInventory.import_date} onChange={handleChange}></input>\n        </label>\n        <label>재료설명:\n            <input type=\"text\" name=\"inventory_desc\" value={newInventory.inventory_desc} onChange={handleChange}></input>\n        </label>\n        <label>비고:\n            <input type=\"text\" name=\"event_desc\" value={newInventory.event_desc} onChange={handleChange}></input>\n        </label>\n        <button>재료추가</button>\n    </form>\n    )\n}\n\nconst Message = ({message}: MessageProps) => {\n    return (\n        <div className=\"message\">\n            {message}\n        </div>\n    )\n}\n\n\n\nexport default AddInventory\n","import React, {useState} from 'react'\nimport axios from 'axios'\nimport '../../styling/Form.css'\n\ninterface LoginUser {\n    userId: string;\n    password: string;\n}\n\nconst Login = () => {\n\n    const [login, setLogin] = useState<LoginUser>({userId: '', password: ''})\n    const [message, setMessage] = useState<string>('')\n    \n    const handleChange = (e: any) => {\n        e.preventDefault()\n        setLogin({...login, \n        [e.target.name]: e.target.value})\n    }\n    const handleSubmit = async (e:React.SyntheticEvent) => {\n        e.preventDefault()\n        try {\n            await axios.post('/auth/log-in', login)\n            window.location.reload();\n        } catch(error) {\n            setMessage(error.response.data.msg)\n        }\n    }\n    return (\n        <div>\n            <div >\n                <h2>로그인</h2>\n                <form onSubmit={handleSubmit}>\n                    <label>User Name:\n                        <input type=\"text\" name=\"userId\" onChange={handleChange}></input>\n                    </label>\n                    <label>Password:\n                        <input type=\"password\" name=\"password\" onChange={handleChange}></input>\n                    </label>\n                    <button>LOG IN</button>\n                    <h4 className=\"message\">{message}</h4>\n                </form>\n            </div>\n\n            \n        </div>\n    )\n}\n\nexport default Login\n","import React, { useState } from 'react'\nimport axios from 'axios'\nimport '../../styling/Form.css'\n\n\ninterface UserSignup {\n    userId: string;\n    password: string;\n    password2: string;\n    userName: string;\n    code: string;\n}\n\n\nconst Signup = () => {\n    const [signUp, setSignup] = useState<UserSignup>({\n        userId: '',\n        password: '',\n        password2: '',\n        userName: '',\n        code: ''\n    })\n\n    const [validation, setValidation] = useState<boolean>(false)\n    const [message, setMessage] = useState<string>('')\n\n    const handleChange = (e: React.ChangeEvent<HTMLInputElement>) => {\n        e.preventDefault()\n        setSignup({\n            ...signUp,\n            [e.target.name]: e.target.value\n        })\n    }\n\n    const handleSubmit = (e: React.SyntheticEvent) => {\n        e.preventDefault()\n        validator()\n    }\n\n    const validator = () => {\n    const {userId, password, password2, userName, code} = signUp\n        if (userId === '' || password === '' || password2 === '' || userName === '' || code === '') {\n            setValidation(false)\n            setMessage('공란입니다.')\n           }\n        else if (password !== password2) {\n            setValidation(false)\n            setMessage('비밀번호2개가 다릅니다.')\n        } else {\n            setValidation(true)\n            signUpNew()\n        }\n    }\n\n    const signUpNew = async() => {\n        try {\n            const signUpPost = await axios.post('/auth/sign-up', signUp)\n            await setMessage(signUpPost.data.msg)\n        } catch(error) {\n            setMessage(error.response.data.msg)\n        }\n    }\n\n    return (\n        <div>\n            <div className=\"signup\">\n                <h2>회원가입</h2>\n                {validation === true ? <Message message={message}/> : \n                <form onSubmit={handleSubmit}>\n                    <label>아이디:\n                        <input name=\"userId\" type=\"text\" onChange={handleChange}></input>\n                    </label>\n                    <label>이름:\n                        <input name=\"userName\" type=\"text\" onChange={handleChange}></input>\n                    </label>\n                    <label>비밀번호:\n                        <input name=\"password\" type=\"password\" onChange={handleChange}></input>\n                    </label>\n                    <label>비밀번호확인:\n                        <input name=\"password2\" type=\"password\" onChange={handleChange}></input>\n                    </label>\n                    <label>가입코드:\n                        <input name=\"code\" type=\"password\" onChange={handleChange}></input>\n                    </label>\n                    <button>회원가입</button>\n                    <Message message={message}/>\n                </form>\n                \n                    }\n     \n            </div>\n        </div>\n    )\n}\n\n\nconst Message = ({message}:any) => {\nreturn (\n    <div>\n        <h4 className=\"message\">{message}</h4>\n    </div>\n)\n}\n\nexport default Signup\n","import Login from './Login'\nimport Signup from './Signup'\n\nconst Auth = () => {\n\n\n    return (\n        <div className=\"formContainer\">\n            <Login />\n            <Signup />\n        </div>\n    )\n}\n\nexport default Auth\n","import React from 'react'\nimport axios from 'axios'\nimport { useHistory } from 'react-router-dom'\n\ninterface UserProps {\n    userName: {userName: string}\n}\n\nconst User = ({userName}: UserProps) => {\n\n    let history = useHistory()\n\n    const logOut = async () => {\n        try {\n            await axios.get('/auth/log-out')\n            await history.push('/')\n            await window.location.reload()\n        } catch(error) {\n            console.log(error)\n        }\n    }\n\n    return (\n        <div>\n            <h2>안녕하세요 {userName}님!</h2>\n            <button className=\"logOut\" onClick={() => logOut()}>LOG OUT</button>\n        </div>\n    )\n}\n\nexport default User\n","import React, {useState, useContext, useEffect } from 'react'\nimport axios from 'axios'\nimport { GetInventoryContext, InventoryContext, TodayContext } from '../contextAPI/DataContext'\nimport '../styling/Form.css';\n\n\nconst UseInventory = () => {\n\n    const getInventory = useContext(GetInventoryContext)\n\n    const [message, setMessage] = useState<string>('')\n    const [validation, setValidation] = useState<boolean>(false)\n\n    useEffect(() => {\n        getInventory()\n    }, [getInventory])\n\n    return (\n        <div >\n                <div className=\"formContainer\">\n                    <h2>재고사용</h2>\n                    {validation === false ? \n                    <>\n                        <Form setMessage={setMessage} setValidation={setValidation} />\n                        <Message message={message}/>\n                    </> \n                    : <Message message={message}/>\n                    } \n                </div>\n        </div>\n    )\n}\n\nconst Message = ({message}: MessageProps) => {\n    return (\n        <div className=\"message\">\n            {message}\n        </div>\n    )\n}\n\nconst Form = ({setMessage, setValidation}: FormProps) => {\n\n    const inventoryInfo = useContext(InventoryContext)\n    const today = useContext(TodayContext)\n\n\n    const [useInventory, setUseInventory] = useState<UseInventory>({\n        inventory_id: '',\n        inventory_amount: 0,\n        event_amount: 0,\n        event_desc: '',\n        event_type: '재고사용',\n        event_date: today,\n        today: today\n    })\n\n    const handleChange = (e: React.ChangeEvent<HTMLInputElement>) => {\n        e.preventDefault()\n        setUseInventory({\n            ...useInventory,\n            [e.target.name]: e.target.value\n        })\n    }\n\n    // 선택한 인벤토리를 useInventory에 넣습니다. \n    const handleSelect = (e: any) => {\n        e.preventDefault()\n        setUseInventory({\n            ...useInventory,\n            inventory_id: inventoryInfo[e.target.value].id,\n            inventory_amount: inventoryInfo[e.target.value].inventory_amount\n        })\n    }\n\n    const handleSubmit = async (e: React.SyntheticEvent) => {\n        e.preventDefault()\n        try {\n            if (useInventory.inventory_id === '' || useInventory.event_desc) {\n                setMessage('재고선택이 되어있지 않거나 \"비고\"가 비어있습니다.')\n            } else {\n                setMessage(`${useInventory.inventory_amount}만큼 사용되었습니다.`)\n                await axios.patch('/inventory/use', useInventory)\n                setValidation(true)\n            }\n        } catch(error) {\n            console.log(error)\n        }\n    }\n\n    return (\n        <form onSubmit={handleSubmit}>\n        사용재고 선택:\n        <select name=\"inventory_id\" onChange={handleSelect}>\n            <option>재고 선택해주세요.</option>\n            {inventoryInfo.map((item: Inventory, index: number) => \n                <option key={index} value={index}>{item.inventory_name} {item.inventory_amount}</option>\n            )}\n        </select>\n        <label>사용양(kg or packet):\n            <input type=\"number\" name=\"event_amount\" value={useInventory.event_amount} onChange={handleChange}></input>\n        </label>\n        <label>비고:\n            <input type=\"text\" name=\"event_desc\" value={useInventory.event_desc} onChange={handleChange}></input>\n        </label>\n        <label>사용날짜:\n            <input type=\"date\" name=\"event_date\" value={useInventory.event_date} onChange={handleChange}></input>\n        </label>\n        <button>재고사용</button>\n    </form>\n    )\n}\n\n// Types\ninterface UseInventory {\n    inventory_id: string | number;\n    inventory_amount: number;\n    event_amount: number;\n    event_desc: string;\n    event_type: string;\n    event_date: string;\n    today: string | Date;\n}\n\ninterface Inventory {\n    id: number;\n    inventory_name: string;\n    inventory_type: string;\n    inventory_amount: number;\n    expiration_date: string;\n    import_date: string;\n    inventory_desc: string;\n    events: any[]\n}\n\ninterface FormProps {\n    setMessage: (message: string) => void;\n    setValidation: (validation: boolean) => void;\n}\n\ninterface MessageProps {\n    message: string;\n}\n\nexport default UseInventory\n","import './App.css';\nimport Navbar from './components/Navbar';\nimport Inventory from './components/inventory/Inventory'\nimport Event from './components/event/Event'\nimport AddInventory from './components/AddInventory'\nimport Auth from './components/auth/Auth'\nimport User from './components/user/User'\nimport {\n  BrowserRouter as Router,\n  Switch,\n  Route,\n  \n} from \"react-router-dom\";\nimport UseInventory from './components/UseInventory';\nimport { useEffect, useState } from 'react'\nimport axios from 'axios'\nimport { DataProvider } from './contextAPI/DataContext'\nimport { BrowserRouter } from 'react-router-dom'\n\ninterface UserName {\n  userName: string\n}\n\nfunction App() {\n\n  // This also works to verify if the user is logged in\n  const [userName, setUserName] = useState<UserName>({userName: ''})\n\n  const verifyUser =  async () => {\n    try {\n      const getVerify = await axios.get('/auth/verify')\n      if (getVerify.data.user_name) {\n        // Set user name, and verify.\n        setUserName(getVerify.data.user_name)\n        console.log('verify success')\n      } else if (getVerify.data.msg === \"unauthorized\"){\n        setUserName({userName: ''})\n      }\n    } catch(error) {\n      setUserName({userName: ''})\n      console.log(error)\n    }\n  }\n\n  useEffect(() => {\n    verifyUser() \n  }, [])\n\n  return (\n    <div className=\"app\">\n\n    <BrowserRouter>\n      <DataProvider>\n        <Router >\n          <h1 className=\"Header\">Ggeek Inventory Tracker</h1>\n          {/* Conditional Rendering on verification */}\n          {userName.userName === '' ? <Auth /> : \n          <>\n            <Navbar />\n            <Switch >\n              <Route exact path=\"/\">\n                <Inventory />\n              </Route>\n              <Route exact path=\"/event\">\n                <Event />\n              </Route>\n              <Route exact path=\"/add\">\n                <AddInventory />\n              </Route>\n              <Route exact path=\"/use\">\n                <UseInventory />\n              </Route>\n\n              <Route exact path=\"/user\">\n                <User userName={userName}/>\n              </Route>\n            </Switch>\n            </>\n          }\n\n        </Router>\n      </DataProvider>\n   </BrowserRouter>\n   </div>\n\n\n  );\n}\n\nexport default App;\n","import { ReportHandler } from 'web-vitals';\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\nreportWebVitals();\n"],"sourceRoot":""}